- 80
    - Creamos un nuevo route handler que devuelva el usuario cuyo id este en la session.
- 81
    - Creamos un route handler que haga un logout ( que quite de la sesion el userId )
    - Testeamos y nos damos cuenta de que si estamos deslogado, sigue dandonos resultados el 'dame el usuario logado'.
    - Controlamos este caso en el getUserById
- 82
    - Nada
- 83
    - Creamos una carpeta decorators
    - Creamos un archivo llamado current-user.decorator.ts
        - importamos createParamDecorator, ExecutionContext
        - export const CurrentUser = creteParamDecorator((data: never, context: ExecutionContext) => {
            return 'Plan Data';
        })
- 84
    - Antes de hacer el return, cogemos la request: const request = context.switchToHttp().getrequest(); console.log('request.session.userId)
- 85
    - Como no podemos tener una instancia del servicio, vamos a crear un interceptor ahora, cogeremos el valor del user, y lo usaremos en el custom decorator ( Poner esto en el comentario )
    - Vamos a crear un interceptor dentro de users y vamos a llamarlo current-user.interceptor.ts
    - Importamos NestInterceptor, ExecutionContext, CallHandler, Injectable
    - Importamos el user service.

    @Injectable()
    export class CurrentUserInterceptor implements NestInterceptor{
        constructor(private usersService: UserService) {}

        async intercept(context: ExecutionContext, handler: CallHandler){
            const request = context.switchToHttp().getRequest()
            const { userId } = request.session || {}

            if(userId) {
                this.usersService.getUserById(userId)
                request.currentUser = user; // Put some comments here. 
            }

            return handler.handle()
        }

    Now we update the decorator
        - Cambiamos el console.log por return request.currentUser

    }
- 87
    - añadimos el interceptor a los providers
    - Ahora, vamos al suerController, y añadimos el interceptor al controller ( con UseInterceptors ( Intentar poner como el contructor? Es mucho mas bonito ))
    - Actualizamos ahora un entry point para que use el decorator
- 88
    - Comentamos lo anterior ( dejamos un comentario para que sepamos que hemos hecho ) y nos vamos a aplicar el interceptor globalmente.
    - Para eso, vamos al user.module.ts e importamos el APP_INTERCEPTOR de nestjs/core y, donde tenemos el CurrentUserInterceptor, en vez de simplemente ponerlo como provider, hacemos esto
    { 
            provide: APP_INTERCEPTOR,
            useClass: CurrentUserInterceptor
    }
- 89
    - Vamos a crear una carpeta que se llame Guards
    - Dentro, un auth.guard.ts
    - Importamos CanActivate, ExecutionContext
    - Export class AuthGuard implements CanActivate{
        canActivate(context: ExecutionContext){
            const request = context.switchToHttp().getRequest()

            return request.session.userId
        }
    }
    - Importamos el AuthGuard y UseGuards
    - Probamos a poner el guard a WhoAmI y veremos que solo devuelve informacion si el usuario esta logado.
    



